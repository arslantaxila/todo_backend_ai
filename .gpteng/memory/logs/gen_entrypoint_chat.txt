
2024-09-22T15:57:48.470727
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: Structure
1 /project-root
2 |-- /controllers
3 |   |-- userController.js
4 |   |-- taskController.js
5 |-- /middlewares
6 |   |-- authMiddleware.js
7 |-- /models
8 |   |-- userModel.js
9 |   |-- taskModel.js
10 |-- /services
11 |   |-- jwtService.js
12 |-- /utils
13 |   |-- validation.js
14 |-- /config
15 |   |-- database.js
16 |-- /routes
17 |   |-- userRoutes.js
18 |   |-- taskRoutes.js
19 |-- /migrations
20 |   |-- createTables.sql
21 |-- app.js
22 |-- package.json
23 |-- .env

File: package.json
1 {
2   "name": "todo-list-app",
3   "version": "1.0.0",
4   "description": "A To-Do List application with user authentication and task management",
5   "main": "app.js",
6   "scripts": {
7     "start": "node app.js",
8     "dev": "nodemon app.js"
9   },
10   "dependencies": {
11     "bcrypt": "^5.0.1",
12     "body-parser": "^1.19.0",
13     "dotenv": "^10.0.0",
14     "express": "^4.17.1",
15     "jsonwebtoken": "^8.5.1",
16     "mysql2": "^2.2.5"
17   },
18   "devDependencies": {
19     "nodemon": "^2.0.12"
20   }
21 }

File: .env
1 DB_HOST=localhost
2 DB_USER=root
3 DB_PASSWORD=password
4 DB_NAME=todo_list
5 JWT_SECRET=your_jwt_secret

File: migrations/createTables.sql
1 CREATE TABLE users (
2     id INT AUTO_INCREMENT PRIMARY KEY,
3     name VARCHAR(255) NOT NULL,
4     email VARCHAR(255) NOT NULL UNIQUE,
5     password VARCHAR(255) NOT NULL,
6     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
7 );
8 
9 CREATE TABLE tasks (
10     id INT AUTO_INCREMENT PRIMARY KEY,
11     user_id INT NOT NULL,
12     title VARCHAR(255) NOT NULL,
13     due_date DATE,
14     priority ENUM('High', 'Medium', 'Low'),
15     status ENUM('Pending', 'Completed') DEFAULT 'Pending',
16     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
17     FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
18 );

File: config/database.js
1 const mysql = require('mysql2');
2 const dotenv = require('dotenv');
3 
4 dotenv.config();
5 
6 const pool = mysql.createPool({
7   host: process.env.DB_HOST,
8   user: process.env.DB_USER,
9   password: process.env.DB_PASSWORD,
10   database: process.env.DB_NAME,
11   waitForConnections: true,
12   connectionLimit: 10,
13   queueLimit: 0
14 });
15 
16 module.exports = pool.promise();

File: models/userModel.js
1 const db = require('../config/database');
2 
3 class UserModel {
4   static async createUser(name, email, password) {
5     const [result] = await db.execute(
6       'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
7       [name, email, password]
8     );
9     return result;
10   }
11 
12   static async findUserByEmail(email) {
13     const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [email]);
14     return rows[0];
15   }
16 
17   static async findUserById(id) {
18     const [rows] = await db.execute('SELECT * FROM users WHERE id = ?', [id]);
19     return rows[0];
20   }
21 
22   static async updateUser(id, name, email, password) {
23     const [result] = await db.execute(
24       'UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?',
25       [name, email, password, id]
26     );
27     return result;
28   }
29 }
30 
31 module.exports = UserModel;

File: models/taskModel.js
1 const db = require('../config/database');
2 
3 class TaskModel {
4   static async createTask(userId, title, dueDate, priority) {
5     const [result] = await db.execute(
6       'INSERT INTO tasks (user_id, title, due_date, priority) VALUES (?, ?, ?, ?)',
7       [userId, title, dueDate, priority]
8     );
9     return result;
10   }
11 
12   static async getTasksByUserId(userId) {
13     const [rows] = await db.execute('SELECT * FROM tasks WHERE user_id = ?', [userId]);
14     return rows;
15   }
16 
17   static async updateTask(id, title, dueDate, priority, status) {
18     const [result] = await db.execute(
19       'UPDATE tasks SET title = ?, due_date = ?, priority = ?, status = ? WHERE id = ?',
20       [title, dueDate, priority, status, id]
21     );
22     return result;
23   }
24 
25   static async deleteTask(id) {
26     const [result] = await db.execute('DELETE FROM tasks WHERE id = ?', [id]);
27     return result;
28   }
29 }
30 
31 module.exports = TaskModel;

File: services/jwtService.js
1 const jwt = require('jsonwebtoken');
2 const dotenv = require('dotenv');
3 
4 dotenv.config();
5 
6 class JWTService {
7   static generateToken(user) {
8     return jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, {
9       expiresIn: '1h'
10     });
11   }
12 
13   static verifyToken(token) {
14     return jwt.verify(token, process.env.JWT_SECRET);
15   }
16 }
17 
18 module.exports = JWTService;

File: utils/validation.js
1 const { body, validationResult } = require('express-validator');
2 
3 const validateSignup = [
4   body('name').notEmpty().withMessage('Name is required'),
5   body('email').isEmail().withMessage('Invalid email format'),
6   body('password')
7     .isLength({ min: 6 })
8     .withMessage('Password must be at least 6 characters long')
9     .matches(/\d/)
10     .withMessage('Password must contain a number'),
11   (req, res, next) => {
12     const errors = validationResult(req);
13     if (!errors.isEmpty()) {
14       return res.status(400).json({ errors: errors.array() });
15     }
16     next();
17   }
18 ];
19 
20 const validateLogin = [
21   body('email').isEmail().withMessage('Invalid email format'),
22   body('password').notEmpty().withMessage('Password is required'),
23   (req, res, next) => {
24     const errors = validationResult(req);
25     if (!errors.isEmpty()) {
26       return res.status(400).json({ errors: errors.array() });
27     }
28     next();
29   }
30 ];
31 
32 module.exports = {
33   validateSignup,
34   validateLogin
35 };

File: middlewares/authMiddleware.js
1 const JWTService = require('../services/jwtService');
2 
3 const authMiddleware = (req, res, next) => {
4   const token = req.headers['authorization'];
5   if (!token) {
6     return res.status(401).json({ message: 'Access denied. No token provided.' });
7   }
8 
9   try {
10     const decoded = JWTService.verifyToken(token);
11     req.user = decoded;
12     next();
13   } catch (ex) {
14     res.status(400).json({ message: 'Invalid token.' });
15   }
16 };
17 
18 module.exports = authMiddleware;

File: controllers/userController.js
1 const bcrypt = require('bcrypt');
2 const UserModel = require('../models/userModel');
3 const JWTService = require('../services/jwtService');
4 const { validationResult } = require('express-validator');
5 
6 class UserController {
7   static async signup(req, res) {
8     const { name, email, password } = req.body;
9 
10     try {
11       const existingUser = await UserModel.findUserByEmail(email);
12       if (existingUser) {
13         return res.status(400).json({ message: 'Email already in use' });
14       }
15 
16       const hashedPassword = await bcrypt.hash(password, 10);
17       await UserModel.createUser(name, email, hashedPassword);
18 
19       res.status(201).json({ message: 'User registered successfully' });
20     } catch (error) {
21       res.status(500).json({ message: 'Server error' });
22     }
23   }
24 
25   static async login(req, res) {
26     const { email, password } = req.body;
27 
28     try {
29       const user = await UserModel.findUserByEmail(email);
30       if (!user) {
31         return res.status(400).json({ message: 'Invalid email or password' });
32       }
33 
34       const validPassword = await bcrypt.compare(password, user.password);
35       if (!validPassword) {
36         return res.status(400).json({ message: 'Invalid email or password' });
37       }
38 
39       const token = JWTService.generateToken(user);
40       res.json({ token });
41     } catch (error) {
42       res.status(500).json({ message: 'Server error' });
43     }
44   }
45 
46   static async updateProfile(req, res) {
47     const { name, email, password } = req.body;
48     const userId = req.user.id;
49 
50     try {
51       const hashedPassword = await bcrypt.hash(password, 10);
52       await UserModel.updateUser(userId, name, email, hashedPassword);
53 
54       res.json({ message: 'Profile updated successfully' });
55     } catch (error) {
56       res.status(500).json({ message: 'Server error' });
57     }
58   }
59 }
60 
61 module.exports = UserController;

File: controllers/taskController.js
1 const TaskModel = require('../models/taskModel');
2 
3 class TaskController {
4   static async addTask(req, res) {
5     const { title, dueDate, priority } = req.body;
6     const userId = req.user.id;
7 
8     try {
9       await TaskModel.createTask(userId, title, dueDate, priority);
10       res.status(201).json({ message: 'Task added successfully' });
11     } catch (error) {
12       res.status(500).json({ message: 'Server error' });
13     }
14   }
15 
16   static async viewTasks(req, res) {
17     const userId = req.user.id;
18 
19     try {
20       const tasks = await TaskModel.getTasksByUserId(userId);
21       res.json(tasks);
22     } catch (error) {
23       res.status(500).json({ message: 'Server error' });
24     }
25   }
26 
27   static async editTask(req, res) {
28     const { id, title, dueDate, priority, status } = req.body;
29 
30     try {
31       await TaskModel.updateTask(id, title, dueDate, priority, status);
32       res.json({ message: 'Task updated successfully' });
33     } catch (error) {
34       res.status(500).json({ message: 'Server error' });
35     }
36   }
37 
38   static async deleteTask(req, res) {
39     const { id } = req.body;
40 
41     try {
42       await TaskModel.deleteTask(id);
43       res.json({ message: 'Task deleted successfully' });
44     } catch (error) {
45       res.status(500).json({ message: 'Server error' });
46     }
47   }
48 }
49 
50 module.exports = TaskController;

File: routes/userRoutes.js
1 const express = require('express');
2 const UserController = require('../controllers/userController');
3 const { validateSignup, validateLogin } = require('../utils/validation');
4 const authMiddleware = require('../middlewares/authMiddleware');
5 
6 const router = express.Router();
7 
8 router.post('/signup', validateSignup, UserController.signup);
9 router.post('/login', validateLogin, UserController.login);
10 router.put('/profile', authMiddleware, UserController.updateProfile);
11 
12 module.exports = router;

File: routes/taskRoutes.js
1 const express = require('express');
2 const TaskController = require('../controllers/taskController');
3 const authMiddleware = require('../middlewares/authMiddleware');
4 
5 const router = express.Router();
6 
7 router.post('/add', authMiddleware, TaskController.addTask);
8 router.get('/view', authMiddleware, TaskController.viewTasks);
9 router.put('/edit', authMiddleware, TaskController.editTask);
10 router.delete('/delete', authMiddleware, TaskController.deleteTask);
11 
12 module.exports = router;

File: app.js
1 const express = require('express');
2 const bodyParser = require('body-parser');
3 const dotenv = require('dotenv');
4 const userRoutes = require('./routes/userRoutes');
5 const taskRoutes = require('./routes/taskRoutes');
6 
7 dotenv.config();
8 
9 const app = express();
10 
11 app.use(bodyParser.json());
12 
13 app.use('/api/users', userRoutes);
14 app.use('/api/tasks', taskRoutes);
15 
16 const PORT = process.env.PORT || 3000;
17 app.listen(PORT, () => {
18   console.log(`Server is running on port ${PORT}`);
19 });

```

================================== Ai Message ==================================

```sh
#!/bin/bash

# Install dependencies
npm install

# Run the application
npm run start
```
