
2024-09-22T15:57:47.733239
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Represent files like so:

FILENAME
```
CODE
```

The following tokens must be replaced like so:
FILENAME is the lowercase combined path and file name including the file extension
CODE is the code in the file

Example representation of a file:

src/hello_world.py
```
print("Hello World")
```

Do not comment on what every file does. Please note that the code should be fully functional. No placeholders.


You will start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

Request: 1. Project Overview
The objective of this project is to develop a To-Do List application that allows users to create, manage, and organize their tasks efficiently. The system will include essential user authentication features like sign up, login, and logout, ensuring secure access to user-specific tasks. Each user will have their personalized to-do list, with options to add, edit, mark tasks as completed, and delete tasks.



Technology Stack
•	Backend: Node.js with Express.js
•	Database: MySQL
•	Authentication: JWT (JSON Web Tokens)

Provide mysql table creation quries in a separate file.

2. Functional Requirements
2.1 User Authentication
2.1.1 Signup
•	Description: Users must be able to register for an account using their email and password.
•	Requirements:
o	A registration form must be provided for users to input their details (e.g., name, email, password).
o	Email must be unique for each user.
o	Passwords must meet security criteria (minimum length, use of alphanumeric characters).
o	Provide validation for all form fields (e.g., valid email format, non-empty fields).
2.1.2 Login
•	Description: Users must be able to log in with valid credentials.
•	Requirements:
o	A login form must be provided for users to enter their email and password.
o	Passwords must be hashed before being stored in the database.
o	Upon successful login, users should be redirected to their personal dashboard.
o	Invalid credentials should result in appropriate error messages.

2.1.3 Logout
•	Description: Users should be able to log out of the application securely.
•	Requirements:
o	Users should have an option to log out.
o	Session or JWT tokens should be invalidated on logout.
2.2 Task Management
2.2.1 Add Task
•	Description: Users must be able to add tasks to their to-do list.
•	Requirements:
o	Users should see a form or input field where they can enter task details (e.g., task title, due date, priority).
o	Tasks must be associated with the logged-in user.
o	The system should allow optional fields for due date and priority level (e.g., High, Medium, Low).
2.2.2 View Tasks
•	Description: Users must be able to view all of their tasks in a structured manner.
•	Requirements:
o	Tasks should be displayed in a list or table format.
o	Tasks can be filtered by status (e.g., pending, completed) or sorted by due date, priority, etc.
o	Completed tasks should be visually distinguishable from pending tasks.
2.2.3 Edit Task
•	Description: Users must be able to edit existing tasks.
•	Requirements:
o	Users should have the option to modify the task title, due date, or priority level.
o	Changes should be saved and reflected immediately.
2.2.4 Mark Task as Completed
•	Description: Users must be able to mark a task as completed.
•	Requirements:
o	Users should be able to click a button or checkbox to mark a task as completed.
o	The task should visually update to indicate completion (e.g., strikethrough or moved to a "Completed" section).
2.2.5 Delete Task
•	Description: Users must be able to delete a task from their list.
•	Requirements:
o	Users should be able to remove tasks by clicking a "Delete" button.
o	A confirmation dialog should appear before permanently deleting a task.
2.3 User Profile Management
2.3.1 Update Profile
•	Description: Users must be able to update their personal information.
•	Requirements:
o	Users should be able to update their name, email, and password.
o	The system should validate email format and check for uniqueness.

Develop the complete backend that will be used for the system.

================================== Ai Message ==================================

To develop the backend for the To-Do List application using Node.js with Express.js and MySQL, we will follow a structured approach. Below is the detailed architecture and implementation of the backend, including user authentication, task management, and user profile management.

### Core Classes, Functions, and Methods

1. **UserController**: Handles user-related operations like signup, login, logout, and profile updates.
2. **TaskController**: Manages task-related operations like adding, viewing, editing, marking as completed, and deleting tasks.
3. **AuthMiddleware**: Middleware for protecting routes that require authentication.
4. **UserModel**: Interacts with the database for user-related queries.
5. **TaskModel**: Interacts with the database for task-related queries.
6. **Database**: Manages the connection to the MySQL database.
7. **Validation**: Contains functions for validating user inputs.
8. **JWTService**: Handles JWT token generation and verification.

### Project Structure

```
/project-root
|-- /controllers
|   |-- userController.js
|   |-- taskController.js
|-- /middlewares
|   |-- authMiddleware.js
|-- /models
|   |-- userModel.js
|   |-- taskModel.js
|-- /services
|   |-- jwtService.js
|-- /utils
|   |-- validation.js
|-- /config
|   |-- database.js
|-- /routes
|   |-- userRoutes.js
|   |-- taskRoutes.js
|-- /migrations
|   |-- createTables.sql
|-- app.js
|-- package.json
|-- .env
```

### Implementation

#### package.json
```
{
  "name": "todo-list-app",
  "version": "1.0.0",
  "description": "A To-Do List application with user authentication and task management",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "dependencies": {
    "bcrypt": "^5.0.1",
    "body-parser": "^1.19.0",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "jsonwebtoken": "^8.5.1",
    "mysql2": "^2.2.5"
  },
  "devDependencies": {
    "nodemon": "^2.0.12"
  }
}
```

#### .env
```
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=password
DB_NAME=todo_list
JWT_SECRET=your_jwt_secret
```

#### migrations/createTables.sql
```
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    due_date DATE,
    priority ENUM('High', 'Medium', 'Low'),
    status ENUM('Pending', 'Completed') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```

#### config/database.js
```
const mysql = require('mysql2');
const dotenv = require('dotenv');

dotenv.config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

module.exports = pool.promise();
```

#### models/userModel.js
```
const db = require('../config/database');

class UserModel {
  static async createUser(name, email, password) {
    const [result] = await db.execute(
      'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
      [name, email, password]
    );
    return result;
  }

  static async findUserByEmail(email) {
    const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [email]);
    return rows[0];
  }

  static async findUserById(id) {
    const [rows] = await db.execute('SELECT * FROM users WHERE id = ?', [id]);
    return rows[0];
  }

  static async updateUser(id, name, email, password) {
    const [result] = await db.execute(
      'UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?',
      [name, email, password, id]
    );
    return result;
  }
}

module.exports = UserModel;
```

#### models/taskModel.js
```
const db = require('../config/database');

class TaskModel {
  static async createTask(userId, title, dueDate, priority) {
    const [result] = await db.execute(
      'INSERT INTO tasks (user_id, title, due_date, priority) VALUES (?, ?, ?, ?)',
      [userId, title, dueDate, priority]
    );
    return result;
  }

  static async getTasksByUserId(userId) {
    const [rows] = await db.execute('SELECT * FROM tasks WHERE user_id = ?', [userId]);
    return rows;
  }

  static async updateTask(id, title, dueDate, priority, status) {
    const [result] = await db.execute(
      'UPDATE tasks SET title = ?, due_date = ?, priority = ?, status = ? WHERE id = ?',
      [title, dueDate, priority, status, id]
    );
    return result;
  }

  static async deleteTask(id) {
    const [result] = await db.execute('DELETE FROM tasks WHERE id = ?', [id]);
    return result;
  }
}

module.exports = TaskModel;
```

#### services/jwtService.js
```
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');

dotenv.config();

class JWTService {
  static generateToken(user) {
    return jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, {
      expiresIn: '1h'
    });
  }

  static verifyToken(token) {
    return jwt.verify(token, process.env.JWT_SECRET);
  }
}

module.exports = JWTService;
```

#### utils/validation.js
```
const { body, validationResult } = require('express-validator');

const validateSignup = [
  body('name').notEmpty().withMessage('Name is required'),
  body('email').isEmail().withMessage('Invalid email format'),
  body('password')
    .isLength({ min: 6 })
    .withMessage('Password must be at least 6 characters long')
    .matches(/\d/)
    .withMessage('Password must contain a number'),
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    next();
  }
];

const validateLogin = [
  body('email').isEmail().withMessage('Invalid email format'),
  body('password').notEmpty().withMessage('Password is required'),
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    next();
  }
];

module.exports = {
  validateSignup,
  validateLogin
};
```

#### middlewares/authMiddleware.js
```
const JWTService = require('../services/jwtService');

const authMiddleware = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Access denied. No token provided.' });
  }

  try {
    const decoded = JWTService.verifyToken(token);
    req.user = decoded;
    next();
  } catch (ex) {
    res.status(400).json({ message: 'Invalid token.' });
  }
};

module.exports = authMiddleware;
```

#### controllers/userController.js
```
const bcrypt = require('bcrypt');
const UserModel = require('../models/userModel');
const JWTService = require('../services/jwtService');
const { validationResult } = require('express-validator');

class UserController {
  static async signup(req, res) {
    const { name, email, password } = req.body;

    try {
      const existingUser = await UserModel.findUserByEmail(email);
      if (existingUser) {
        return res.status(400).json({ message: 'Email already in use' });
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      await UserModel.createUser(name, email, hashedPassword);

      res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }

  static async login(req, res) {
    const { email, password } = req.body;

    try {
      const user = await UserModel.findUserByEmail(email);
      if (!user) {
        return res.status(400).json({ message: 'Invalid email or password' });
      }

      const validPassword = await bcrypt.compare(password, user.password);
      if (!validPassword) {
        return res.status(400).json({ message: 'Invalid email or password' });
      }

      const token = JWTService.generateToken(user);
      res.json({ token });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }

  static async updateProfile(req, res) {
    const { name, email, password } = req.body;
    const userId = req.user.id;

    try {
      const hashedPassword = await bcrypt.hash(password, 10);
      await UserModel.updateUser(userId, name, email, hashedPassword);

      res.json({ message: 'Profile updated successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }
}

module.exports = UserController;
```

#### controllers/taskController.js
```
const TaskModel = require('../models/taskModel');

class TaskController {
  static async addTask(req, res) {
    const { title, dueDate, priority } = req.body;
    const userId = req.user.id;

    try {
      await TaskModel.createTask(userId, title, dueDate, priority);
      res.status(201).json({ message: 'Task added successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }

  static async viewTasks(req, res) {
    const userId = req.user.id;

    try {
      const tasks = await TaskModel.getTasksByUserId(userId);
      res.json(tasks);
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }

  static async editTask(req, res) {
    const { id, title, dueDate, priority, status } = req.body;

    try {
      await TaskModel.updateTask(id, title, dueDate, priority, status);
      res.json({ message: 'Task updated successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }

  static async deleteTask(req, res) {
    const { id } = req.body;

    try {
      await TaskModel.deleteTask(id);
      res.json({ message: 'Task deleted successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }
}

module.exports = TaskController;
```

#### routes/userRoutes.js
```
const express = require('express');
const UserController = require('../controllers/userController');
const { validateSignup, validateLogin } = require('../utils/validation');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.post('/signup', validateSignup, UserController.signup);
router.post('/login', validateLogin, UserController.login);
router.put('/profile', authMiddleware, UserController.updateProfile);

module.exports = router;
```

#### routes/taskRoutes.js
```
const express = require('express');
const TaskController = require('../controllers/taskController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.post('/add', authMiddleware, TaskController.addTask);
router.get('/view', authMiddleware, TaskController.viewTasks);
router.put('/edit', authMiddleware, TaskController.editTask);
router.delete('/delete', authMiddleware, TaskController.deleteTask);

module.exports = router;
```

#### app.js
```
const express = require('express');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');
const userRoutes = require('./routes/userRoutes');
const taskRoutes = require('./routes/taskRoutes');

dotenv.config();

const app = express();

app.use(bodyParser.json());

app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
```

This concludes a fully working implementation.
